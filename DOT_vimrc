" --------------- Auto-install vim-plug if not detected ----------------------
let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
" ------------------------------- plugins ----------------------------------
Plug 'github/copilot.vim'
Plug 'morhetz/gruvbox' " colorscheme
" --------------------------------------------------------------------------
call plug#end()
" ---------------------------- basic setup ---------------------------------

se nu           " turn on line numbers
se scrolloff=12 " keep 12 lines of context around cursor

syntax on       " turn on syntax highlighting (default in nvim)

se expandtab tabstop=4 shiftwidth=4 " Set tabs to 4 spaces

se bri lbr " wrap lines at current indent level, don't split words


" "--------------------------
" Plug 'arecarn/vim-crunch'
" Plug 'arecarn/vim-selection'
" Plug 'godlygeek/tabular'
" Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }, 'for': ['markdown', 'vim-plug']}
" Plug 'kana/vim-submode'
" Plug 'mg979/vim-visual-multi'
" Plug 'preservim/nerdcommenter'
" Plug 'preservim/nerdtree'
" "Plug 'sheerun/vim-polyglot'
" Plug 'FraserLee/vim-polyglot'
" Plug 'tommcdo/vim-exchange'
" Plug 'tpope/vim-repeat'
" Plug 'tpope/vim-surround'
" Plug 'valloric/youcompleteme'
" "--------------------------
" "------------------BASIC SETUP---------------------
" 
" "Let :MarkdownPreview work on any file type 
" let g:mkdp_command_for_global = 1
" 
" "Fix backspace to work more rationally
" set backspace=indent,eol,start
" 
" "Set spelling language
" set spell spelllang=en_ca,ru
" 
" "enable folds from indent, auto-open all when entering a file
" autocmd BufEnter * ++nested se fdm=indent foldlevel=100
" 
" "Make ycm work a bit better with haxe
" let g:vaxe_enable_ycm_defaults = 1
" let g:vaxe_cache_server_autostart = 1
" 
" "search stuff
" set incsearch
" set hlsearch
" 
" "Evaluate math expressions (with g=)
" let g:crunch_result_type_append = 0
" 
" "command completion with <tab>
" set wildmenu
" set wildmode=longest:full,full
" 
" "re-open files at the same line as closed
" "make sure to mkdir ~/.vim/view/ if it doesn't already exist
" autocmd BufWinLeave *.* mkview
" autocmd BufWinEnter *.* silent loadview 
" 
" " Markdown settings
" " au BufReadPost,BufNewFile *.md <Plug>MarkdownPreview
" let g:mkdp_markdown_css = expand('~/vimrc/markdown_style.css')
" 
" "--------------------COLOUR------------------------
" "Sets the colour theme and turns on spelling highlighting to underscore
" "whenever entering vim. If I don't do these two in one call, stuff resets
" "weird.
" autocmd vimenter * ++nested call SetColourStuff()
" function SetColourStuff()
"     colorscheme gruvbox 
"     set background=dark
"     " colorscheme PaperColor 
"     " colorscheme one 
"     " set background=light
"     " colorscheme rakr 
"     hi SpellBad cterm=underline
" endfunction
" call SetColourStuff()
" 
" "Filetypes not associating correctly by default
" au BufRead,BufNewFile *.asm set ft=mips
" 
" 
" "-----------------MAPPING STUFF--------------------
" 
" "Swaps s and l to make dvorak work a wee bit better. For some reason a langmap
" "messes with submodes, so I just remap em instead.
" ""set langmap=sl,ls,SL,LS
" noremap s l
" noremap l s
" noremap S L
" noremap L S
" 
" "Space to <leader> for super convenient combos
" nnoremap <SPACE> <Nop>
" let mapleader=" "
" 
" "Better navigation on wrapped lines
" nnoremap j            gj
" nnoremap k            gk
" vnoremap j            gj
" vnoremap k            gk
" nnoremap <Down>       gj
" nnoremap <Up>         gk
" vnoremap <Down>       gj
" vnoremap <Up>         gk
" inoremap <Down> <C-o> gj
" inoremap <Up>   <C-o> gk
" 
" "Unmap some keys I accidentally hit too much because of dvorak 
" nnoremap <S-q> <Nop> 
" nnoremap <C-z> <Nop> 
" 
" "----------------BASIC SHORTCUTS-------------------
" 
" "toggle nerdtree
" nnoremap <leader>g :NERDTreeToggle<CR>
" "open nerdtree on current file
" nnoremap <leader>f :NERDTreeFind<CR>
" "jump to definition
" nnoremap <leader>t :YcmCompleter GoTo<CR>
" "fix easy errors
" nnoremap <leader>n :YcmCompleter FixIt<CR>
" "toggle normal comment
" map <leader>/ <plug>NERDCommenterToggle 
" "fancy comment
" map <leader>? <plug>NERDCommenterSexy 
" "multi-cursor re-binds for mac, C-n n n n to select a bunch of the same word.
" let g:VM_maps = {}
" let g:VM_maps["Add Cursor Down"]   = '<C-j>'
" let g:VM_maps["Add Cursor Up"]     = '<C-k>'
" "allow ctrl-z in insert mode to correct the most recent spelling mistake
" inoremap <C-z> <c-g>u<Esc>[s1z=`]a<c-g>u
" "---------------COMPLEX SHORTCUTS-------------------
" "----------(all done through submodes)--------------
"              
" let g:submode_timeout = 1
" let g:submode_timeoutlen = 2000
" " don't consume submode-leaving key
" let g:submode_keep_leaving_key = 1
" 
" "g+ and g- (undo & redo) let you repeat hit + and -
" "(also = works as + so you don't need to hit shift)
" call submode#enter_with ( 'undo/redo', 'n', '', 'g-', 'g-' )
" call submode#enter_with ( 'undo/redo', 'n', '', 'g+', 'g+' )
" call submode#enter_with ( 'undo/redo', 'n', '', 'g/', 'g+' )
" call submode#map        ( 'undo/redo', 'n', '', '-', 'g-'  )
" call submode#map        ( 'undo/redo', 'n', '', '+', 'g+'  )
" call submode#map        ( 'undo/redo', 'n', '', '=', 'g+'  )
" call submode#map        ( 'undo/redo', 'n', '', '/', 'u+'  )
" 
" "<leader> plus a direction massively changes window size. Subsequent taps to
" "that a direction change it by 1 (though space can be re-pressed for another
" "large increment)
" "
" " s is also used in place of l
" call submode#enter_with('window_resize', 'n', '', '<leader>h', ':exe "vertical resize " . (winwidth (0) * 4/3)<CR>')
" call submode#enter_with('window_resize', 'n', '', '<leader>s', ':exe "vertical resize " . (winwidth (0) * 3/4)<CR>')
" call submode#enter_with('window_resize', 'n', '', '<leader>j', ':exe          "resize " . (winheight(0) * 4/3)<CR>')
" call submode#enter_with('window_resize', 'n', '', '<leader>k', ':exe          "resize " . (winheight(0) * 3/4)<CR>')
" call submode#map       ('window_resize', 'n', '', 'h', '<C-w>>')
" call submode#map       ('window_resize', 'n', '', 's', '<C-w><')
" call submode#map       ('window_resize', 'n', '', 'j', '<C-w>+')
" call submode#map       ('window_resize', 'n', '', 'k', '<C-w>-')
" 
" "-------------------COMMENTING----------------------
" "A whole whack of default settings
" let g:NERDCreateDefaultMappings = 0
" let g:NERDSpaceDelims           = 1
" let g:NERDCompactSexyComs       = 1
" let g:NERDDefaultAlign          = 'left'
" let g:NERDCommentEmptyLines     = 1
" let g:NERDToggleCheckAllLines   = 1
" 
" 
" "-----------BASIC COMPILATION SHORTCUTS-------------
" "<F4> runs the current file assuming it's standalone, <F5> assumes there's
" "some language-specific makefile equivalent.
" "
" "TODO: add more language type supports
" "TODO: replace current terminal window instead of creating a new one if one
" "exists
" "TODO: auto-shift focus back away from terminal-window if input isn't required
" "
" "modified majorly from https://stackoverflow.com/a/18296266/
" "terminal easier use
" tnoremap <Esc> <C-\><C-n>
" "<F4>
" autocmd filetype python nnoremap <F4> :w <bar> :vert term ++shell python3 %:p<CR>
" autocmd filetype c      nnoremap <F4> :w <bar> :vert term ++shell gcc   "%:p" -o "%:p:r" && "%:p:r"<CR>
" autocmd filetype cpp    nnoremap <F4> :w <bar> :vert term ++shell g++   "%:p" -o "%:p:r" && "%:p:r"<CR>
" autocmd filetype rust   nnoremap <F4> :w <bar> :vert term ++shell rustc "%:p" -o "%:p:r" && "%:p:r"<CR>
" "<F5>
" autocmd filetype rust   nnoremap <F5> :w <bar> :vert term ++shell cargo run<CR>
